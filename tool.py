#!/usr/bin/python2.7
# -*- coding: utf-8 -*-

from Tkinter import *
from ttk import Frame, Button, Style
import autopy
import math
import time
import pickle

#file = open('/home/takt/scripts/draws/d.d', 'r+b')
#with file as f:
#	content = f.readlines()

#c = 0
#i = len(drawing)

#while (c<i):
	
#print draw[0]

draw = [0,1,2,3,4]

#draw[0] = [[997, 616], [987, 559], [972, 510], [965, 466], [974, 443], [974, 416], [964, 392], [971, 355], [992, 343], [991, 324], [1006, 333], [1033, 331], [1047, 334], [1067, 322], [1076, 329], [1074, 349], [1073, 370], [1091, 415], [1108, 474], [1129, 478], [1143, 507], [1160, 543], [1165, 592], [1165, 612], 2202, [985, 355], [991, 358], 2202, [1024, 360], [1006, 362], 2202, [976, 387], [985, 380], [996, 393], 2202, [986, 370], [987, 367], [993, 368], [985, 373], 2202, [1047, 343], [1056, 333], [1064, 327], [1068, 328], [1072, 347], [1063, 362]]
draw[0] = [[940, 624], [928, 617], [928, 614], [933, 586], [937, 558], [939, 547], [940, 536], [940, 534], [938, 535], [939, 530], [938, 529], [938, 526], [927, 512], [927, 509], [930, 495], [936, 478], [938, 468], [945, 467], [952, 462], [954, 461], [955, 453], [954, 451], [954, 448], [712, 447], 2202, [954, 638], [953, 633], [953, 628], [958, 626], [962, 596], [964, 624], [967, 628], [966, 639], 2202, [979, 639], [981, 627], [990, 625], [997, 622], [1003, 618], [996, 575], [992, 559], [990, 547], [987, 534], [990, 537], [989, 533], [993, 527], [998, 519], [998, 516], [1001, 511], [991, 482], [986, 468], [977, 465], [970, 460], [968, 458], [969, 452], [968, 448], [1208, 448], 2202, [961, 447], [711, 436], 2202, [961, 447], [768, 431], 2202, [961, 447], [711, 418], 2202, [961, 448], [712, 407], 2202, [961, 447], [711, 392], 2202, [961, 448], [766, 390], 2202, [961, 448], [711, 365], 2202, [961, 447], [779, 372], 2202, [961, 447], [741, 344], 2202, [961, 448], [756, 344], 2202, [960, 447], [711, 311], 2202, [961, 447], [749, 320], 2202, [962, 447], [831, 356], 2202, [960, 446], [787, 312], 2202, [960, 446], [806, 304], 2202, [961, 447], [818, 304], 2202, [961, 446], [836, 313], 2202, [961, 447], [839, 304], 2202, [961, 447], [852, 310], 2202, [960, 446], [858, 304], 2202, [961, 447], [869, 304], 2202, [961, 447], [880, 304], 2202, [961, 448], [887, 304], 2202, [960, 447], [894, 304], 2202, [960, 446], [907, 305], 2202, [961, 447], [910, 303], 2202, [960, 447], [921, 305], 2202, [960, 448], [931, 304], 2202, [961, 447], [936, 305], 2202, [960, 447], [943, 303], 2202, [960, 447], [947, 305], 2202, [960, 448], [952, 304], 2202, [960, 449], [957, 303], 2202, [961, 447], [962, 305], 2202, [960, 447], [970, 304], 2202, [961, 447], [977, 303], 2202, [960, 448], [982, 305], 2202, [960, 447], [987, 305], 2202, [960, 449], [1000, 305], 2202, [961, 449], [1016, 305], 2202, [961, 446], [1027, 302], 2202, [960, 447], [1038, 303], 2202, [961, 447], [1060, 304], 2202, [961, 446], [1069, 304], 2202, [960, 446], [1080, 304], 2202, [961, 447], [1090, 306], 2202, [959, 446], [1101, 304], 2202, [960, 445], [1111, 304], 2202, [960, 446], [1124, 303], 2202, [960, 446], [1145, 305], 2202, [961, 446], [1165, 304], 2202, [959, 447], [1181, 305], 2202, [960, 447], [1108, 362], 2202, [960, 447], [1208, 316], 2202, [961, 447], [1184, 340], 2202, [960, 448], [1208, 348], 2202, [961, 448], [1189, 367], 2202, [960, 448], [1208, 376], 2202, [961, 447], [1195, 398], 2202, [960, 447], [1207, 404], 2202, [960, 447], [1208, 420], 2202, [961, 446], [1159, 437], 2202, [953, 447]]
draw[1] = [[867, 488], [847, 497], [838, 512], [833, 529], [834, 548], [838, 566], [848, 581], [861, 588], [877, 588], [890, 579], [901, 561], [904, 533], [899, 511], [887, 496], [867, 489], 2202, [937, 490], [937, 586], 2202, [937, 551], [994, 491], 2202, [962, 525], [999, 588], 2202, [1087, 498], [1073, 489], [1058, 489], [1040, 496], [1030, 512], [1024, 534], [1026, 558], [1038, 576], [1058, 588], [1080, 586], [1090, 578], 2202, [873, 454], [874, 434], [884, 433], [885, 422], [905, 421], [906, 411], [916, 411], [916, 401], [916, 391], [905, 390], [905, 376], [905, 357], [917, 356], [917, 347], [940, 347], [940, 353], [952, 356], [950, 388], [940, 390], [940, 412], [951, 411], [951, 422], [964, 423], [964, 432], [984, 433], [985, 420], [993, 420], [993, 401], [983, 388], [991, 382], [1002, 366], [1017, 374], [1026, 391], [1016, 402], [1016, 420], [1035, 434], [1043, 438], [1047, 445], [1050, 455], [874, 454]]
draw[2] = [[928, 384], [809, 383], [734, 494], [851, 492], [934, 378], [943, 389], 2202, [993, 385], [1113, 384], [1189, 495], [1069, 493], [987, 377], [978, 390], 2202, [892, 487], [878, 481], [961, 367], [1043, 481], [1029, 488], 2202, [960, 626], [960, 521], [889, 494], [961, 394], [1032, 493], [961, 522], 2202, [714, 584], [890, 509], [895, 506], [899, 499], 2202, [1209, 584], [1030, 508], [1026, 506], [1023, 500], 2202, [1176, 624], [1008, 503], 2202, [744, 626], [913, 505], 2202, [848, 624], [940, 515], 2202, [1074, 625], [982, 514], 2202, [888, 509], [960, 533], [1033, 510], 2202, [869, 518], [960, 552], [1052, 520], 2202, [841, 530], [960, 573], [1080, 529], 2202, [758, 483], [841, 483], [903, 394], [821, 395], [759, 483], 2202, [801, 484], [861, 395], 2202, [779, 454], [799, 482], 2202, [801, 426], [840, 481], 2202, [822, 396], [860, 453], 2202, [863, 394], [882, 423], 2202, [1164, 483], [1100, 395], [1019, 395], [1080, 483], [1162, 482], 2202, [1061, 395], [1121, 483], 2202, [1143, 455], [1123, 483], 2202, [1123, 425], [1080, 481], 2202, [1100, 394], [1061, 454], 2202, [1057, 395], [1040, 424], 2202, [960, 506], [1006, 490], [985, 460], [959, 471], [933, 462], [915, 490], [959, 505], [960, 469], 2202, [936, 461], [960, 452], [985, 462], 2202, [947, 443], [960, 448], [973, 443], [961, 424], [947, 442]]
draw[3] = [[1142, 520], [1078, 528], [1012, 534], [919, 538], [911, 535], [912, 533], [917, 528], [948, 523], [1007, 512], [1063, 502], [1112, 488], [1122, 484], [1119, 481], 2202, [1113, 466], [1126, 466], [1138, 473], [1146, 483], [1148, 491], [1148, 497], [1146, 504], [1146, 515], [1141, 520], [1136, 522], 2202, [1117, 484], [1116, 472], [1112, 460], [1104, 452], [1082, 444], [1054, 436], [1038, 430], [1013, 422], [970, 418], [943, 418], 2202, [919, 421], [907, 429], [890, 431], 2202, [938, 468], [919, 450], [900, 438], [882, 430], [859, 430], [844, 433], [837, 438], [820, 439], 2202, [829, 442], [811, 433], [797, 426], [780, 412], [782, 420], [788, 434], [792, 452], [793, 466], [793, 477], [804, 498], [813, 516], [824, 529], [832, 523], [842, 522], [852, 527], [862, 536], [865, 540], [908, 539], [915, 528], [929, 508], [938, 490], [940, 479], [932, 466], 2202, [934, 467], [938, 457], [936, 447], [938, 437], [942, 428], [946, 417], [948, 407], [945, 399], [943, 399], [934, 404], [928, 415], [918, 425], [912, 431], [904, 440], [919, 484], [905, 494], 2202, [904, 492], [904, 502], 2202, [876, 505], [869, 498], 2202, [872, 501], [856, 499], 2202, [886, 524], [897, 532], [904, 520], [894, 520], [888, 524], 2202, [829, 536], [827, 544], [837, 549], [851, 550], [859, 549], [862, 545], [858, 540], [840, 530], [835, 530], 2202, [840, 530], [839, 536], [839, 542], [843, 545], [847, 547], [851, 546], 2202, [882, 542], [910, 533], 2202, [920, 516], [968, 512], 2202, [924, 515], [980, 506], 2202, [927, 510], [961, 502], 2202, [865, 524], [820, 534], 2202, [868, 531], [822, 539], 2202, [868, 534], [821, 546], [795, 485], [795, 501], [796, 519], [803, 527], [811, 534], [826, 546], [832, 546]]
draw[4] = [[997, 616], [987, 559], [972, 510], [965, 466], [974, 443], [974, 416], [964, 392], [971, 355], [992, 343], [991, 324], [1006, 333], [1033, 331], [1047, 334], [1067, 322], [1076, 329], [1074, 349], [1073, 370], [1091, 415], [1108, 474], [1129, 478], [1143, 507], [1160, 543], [1165, 592], [1165, 612], 2202, [985, 355], [991, 358], 2202, [1024, 360], [1006, 362], 2202, [976, 387], [985, 380], [996, 393], 2202, [986, 370], [987, 367], [993, 368], [985, 373], 2202, [1047, 343], [1056, 333], [1064, 327], [1068, 328], [1072, 347], [1063, 362]]

n = 0

class Example(Frame):

	def __init__(self, parent):
		Frame.__init__(self, parent)

		self.parent = parent
		self.initUI()

	def initUI(self):

		x = self.winfo_pointerx()
		y = self.winfo_pointery()

		def update():
			self.T.delete('1.0', END)
			self.T.insert(INSERT, draw[n][1:-1])

		def callback(x,y):
			global draw
			draw[n].append([x,y])
			update()

		def getpos(event):
			x = self.winfo_pointerx()
			y = self.winfo_pointery()
			callback(x,y)

		def split(event):
			global draw
			draw[n].append(2202)
			update()

		def clear():
			global draw
			draw[n] = []
			self.T.delete('1.0', END)

		def sel(event):
			global n
			w = event.widget
			index = int(w.curselection()[0])
			print index
			n = index
			update()

		def play():
			def wait():
				time.sleep(0.1)
				return;
			
			def playThis():
				c = 0
				drawing = draw[n]
				i = len(drawing)
				drawing = draw[n]
				autopy.mouse.move(drawing[c][0],drawing[c][1])
				autopy.mouse.toggle(True)
				while (c<i):
					if(drawing[c] == 2202):
						autopy.mouse.toggle(False)
						c += 1
						wait()
					else:
						autopy.mouse.move(drawing[c][0],drawing[c][1])
						autopy.mouse.toggle(True)
						c += 1
						wait()
				autopy.mouse.toggle(False)
				return;
			playThis()

		# def save():

		self.parent.title("The AMAZING Draw Tool")
		self.style = Style().configure("GB.TButton", foreground='green', background='black')

		self.pack(fill=Y, expand=True)

		self.closeButton = Button(self, width=40, text="Close", command=self.quit)
		self.closeButton.pack(fill=Y, padx=5, pady=2)

		self.Saves = Listbox(self, width=41, height=5)
		self.Saves.bind('<<ListboxSelect>>', sel)		
		self.Saves.pack(fill=Y, padx=5, pady=2)
		self.Saves.insert(END, 0)
		self.Saves.insert(END, 1)
		self.Saves.insert(END, 2)
		self.Saves.insert(END, 3)
		self.Saves.insert(END, 4)

		self.playButton = Button(self, width=40, text="Play", command=play)
		self.playButton.pack(fill=Y, padx=5, pady=2)

		self.Clear = Button(self, width=40, text="Clear", command=clear)
		self.Clear.pack(fill=Y, padx=5, pady=2)

		self.Info = Label(self, width=41, text="E to record, Q to split")
		self.Info.pack(fill=Y, padx=5, pady=2)

		self.T = Text(self, width=45, height=180)
		self.T.pack(fill=Y, padx=5, pady=2)

		update()

def main():
  
	root = Tk()
	root.geometry("255x1080+0+0")
	app = Example(root)
	root.mainloop()  

if __name__ == '__main__':
	main()